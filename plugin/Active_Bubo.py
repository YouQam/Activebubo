# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ActiveBubo
                                 A QGIS plugin
 ActiveBubo is a python coding project developed as the final assignment for the Python in GIS course. The data provided for the project contained a large dataset of GPS tracks, surveilling the movement of more than 20 Eagle Owls over a time span of several years. Browsing through the available data, it was decided by the group to investigate and answer the following research questions: Which is the month and the season in which the owls are most/least active? Does the temporal scope of owl activity change for different regions? For different owl genders? Which owl is the most active?
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Univerity of Muenster
        email                : y_qama01@uni-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import QFileDialog
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Active_Bubo_dialog import ActiveBuboDialog
import os
from qgis.core import *
from qgis.gui import QgsMessageBar
import qgis.utils
import ogr
from PyQt5.QtGui import *
from PyQt5 import *
from PyQt5 import QtWidgets 
from PyQt5.QtWidgets import QTableWidget,QTableWidgetItem, QPushButton

fieldsName_list = []
fieldsType_list = []
filterFields_list = []
i=1
first_row = True
class ActiveBubo:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ActiveBubo_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = ActiveBuboDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Active Bubo')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ActiveBubo')
        self.toolbar.setObjectName(u'ActiveBubo')
        #/////////////////////////
        self.dlg.lineEdit.clear()
        #self.dlg.lineEdit_2.clear()
        self.dlg.pushButton.clicked.connect(self.open_shapefile)
        self.dlg.pushButton_2.clicked.connect(self.Select_field)
        self.dlg.pushButton_3.clicked.connect(self.Select_all_field)
        self.dlg.pushButton_4.clicked.connect(self.delete_rows)
        self.dlg.pushButton_5.clicked.connect(self.addExpression)
        self.dlg.pushButton_4.hide()
    #---------------------------
    def open_shapefile(self):
        filename = QFileDialog.getOpenFileName(self.dlg, "Open shapefile ","", '*.shp')
        self.dlg.lineEdit.setText(str(filename[0]))
        in_path = (str(filename[0]).replace('/','\\\\'))
        # get the correct driver
        driver = ogr.GetDriverByName('ESRI Shapefile')
        # 0 means read-only. 1 means writeable.
        data_source = driver.Open(in_path, 0)
        # get the Layer class object
        layer = data_source.GetLayer(0)
        global fieldsName_list
        global fieldsType_list
        attributes = layer.GetLayerDefn()
        for i in range(attributes.GetFieldCount()):
            fieldsName_list.append(attributes.GetFieldDefn(i).GetName())
            fieldsType_list.append(attributes.GetFieldDefn(i).GetTypeName())
        self.dlg.comboBox.addItems(fieldsName_list)
        
    def Select_field(self):
        global filterFields_list
        #global i 
        #i = i + 2
        #a = self.dlg.comboBox.currentIndex()    
        #self.dlg.lineEdit_2.setText(self.dlg.lineEdit_2.text() + self.dlg.comboBox.currentText())
        #####
        #button = QPushButton(QTableWidget)
        #self.dlg.button.clicked.connect(self.delete_rows)

        #####
        #self.dlg.lineEdit_2.setText(self.dlg.lineEdit_2.text() + str(self.dlg.tableWidget.rowCount()))
        rowPosition = self.dlg.tableWidget.rowCount()
        self.dlg.tableWidget.insertRow(rowPosition)
        field_name = fieldsName_list[self.dlg.comboBox.currentIndex()]
        field_type = fieldsType_list[self.dlg.comboBox.currentIndex()]
        numcols = self.dlg.tableWidget.columnCount()
        numrows = self.dlg.tableWidget.rowCount()   
        self.dlg.tableWidget.setRowCount(numrows)
        self.dlg.tableWidget.setColumnCount(numcols)           
        self.dlg.tableWidget.setItem(numrows -1,0,QtWidgets.QTableWidgetItem(field_name))
        self.dlg.tableWidget.setItem(numrows -1,1,QtWidgets.QTableWidgetItem(field_type))
        #self.dlg.lineEdit_2.hide()
        #self.dlg.tableWidget.setItem(numrows -1,2,QtWidgets.QTableWidgetItem("-"))
        self.dlg.comboBox_2.addItem(fieldsName_list[self.dlg.comboBox.currentIndex()])
    
    def Select_all_field(self):
        for i in range(len(fieldsName_list)):
            rowPosition = self.dlg.tableWidget.rowCount()
            self.dlg.tableWidget.insertRow(rowPosition)
            field_name = fieldsName_list[i]
            field_type = fieldsType_list[i]
            numcols = self.dlg.tableWidget.columnCount()
            numrows = self.dlg.tableWidget.rowCount()   
            self.dlg.tableWidget.setRowCount(numrows)
            self.dlg.tableWidget.setColumnCount(numcols)           
            self.dlg.tableWidget.setItem(numrows -1,0,QtWidgets.QTableWidgetItem(field_name))
            self.dlg.tableWidget.setItem(numrows -1,1,QtWidgets.QTableWidgetItem(field_type)) 
        self.dlg.comboBox_2.addItems(fieldsName_list)
    
    
    def addExpression(self):
        self.dlg.lineEdit_2.setText(self.dlg.lineEdit_2.text() +" "+ self.dlg.comboBox_2.currentText())



    
    def delete_rows(self):
        i=1
        # to delete all rows
        #self.dlg.tableWidget.setRowCount(0)
        # to delete all rows
        #self.dlg.tableWidget.removeRow(1)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ActiveBubo', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Active_Bubo/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Active Bubo'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Active Bubo'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
